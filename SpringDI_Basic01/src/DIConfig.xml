<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans.xsd">
<!--  
Spring 자신만의 [컨테이너(Spring 전용 메모리 공간)] 제공 => (IOC) 안에 
[객체를 만들고 조립(관계...의존성)] 설정

>>DIConfig.xml 문서를  read 해서 ....안에 있는 코드 먼저 실행
>>xml 파일은 컨테이너를 구성하는 [객체를 생성]하고 [의존]을 설정하는 파일
또는  Annotation 통해서 컨테이너 자원 구성

:제어의 역전 (프로그램의 제어구조를 바꾼다)
:작은 단위의 부품을 만들어 놓고 그 것을 조립하는 행위 (레고 블럭 처럼)


>>>>>java code main 함수 객체 생성 주입 코드 > 메인에서 개발자가 적던 코드
NewRecordView view = new NewRecordView();
NewRecord record = new NewRecord();
		
view.setRecord(record); //setter로 주입(다형성)    >   이렇게 하는걸 DI라고 함

위와 같은 코드를 자바코드가 아닌 설정을 통해서 구현 (XML 또는 Annotation)
-->
<bean class="Spring_DI4.NewRecord" id="record"></bean>
<!-- 여기서는 폴더밑에밑에를 (.) 점으로 구분 /  id가 NewRecord에 있는 멤버변수명 , 객체 이름이라고 생각하래 둘중에 뭐가 맞음?
	 자바 코드 : NewRecord record = new NewRecord();
-->

<bean class="Spring_DI4.NewRecordView" id="view">
	<property name="record" ref="record"></property>  <!-- ref 참고합니다, 여기있는 record를 -->  
	<!-- 자동으로 setter 동작 // ref는 set함수안에 쓰는 주소값 인거임--> 
	<!-- property 의 name은 setter 함수를 구현하고 있는 멤버필드명을 쓰면 됩니다.8번째줄 record-->
</bean>
<!-- 자바 코드 : NewRecordView view = new NewRecordView(); -->

</beans>