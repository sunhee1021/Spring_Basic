<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!--  
	
	1. 실 객체의 주소를 알아야 함
		Calc calc = new NewCalc();
		
	2. 가짜를 생성할거임 (= proxy)
		Calc cal = (Calc)Proxy.newProxyInstance(calc.getClass().getClassLoader(), //실 객체의 메타 정보(내부정보)
							   				    calc.getClass().getInterfaces(),  //행위 정보 (인터페이스로 넘겨주고)
							   				    new LogPrintHandler(calc));  //보조 객체의 정보
	
	spring
	1.org.springframework.aop.framework.ProxyFactoryBean 통해서 프록시 객체 생성
	2.LogPrintAroundAdvice 객체(bean) 생성
	3.LogPrintBeforeAdvice 객체(bean) 생성
	4.LogPrintAfterAdvice  객체(bean) 생성
	
	문제점 ) ADD, MUL, SUB 3개의 함수 모두 보조업무가 실행
	
	joinpoint(성수대교 , 무슨대교 이런것들중에)  >  pointcut(잠수교! 이렇게 하나의 포인트(만나는곳)) 
	개념을 사용해서 특정함수 (지정한)제한적으로 보조관심(공통모듈)을 적용하고 싶다
	
	> pointcut 사용해서 특정 함수 ... 보조업무가 적용되고 싶은거래
	
	import org.springframework.aop.support.NameMatchMethodPointcut;
	import org.springframework.aop.support.DefaultPointcutAdvisor;
	
	
	하나의 함수가 동작할 때 여러개의 보조업무 수행가능하다(advice)
	
	-->
	<bean id="calc" class="AOP_Basic_Spring06.NewCalc"></bean>
	<bean id="logPrintAroundAdvice" class="AOP_Basic_Spring06.LogPrintAroundAdvice"></bean>
	<bean id="logPrintBeforeAdvice" class="AOP_Basic_Spring06.LogPrintBeforeAdvice"></bean>
	<bean id="logPrintAfterAdvice"  class="AOP_Basic_Spring06.LogPrintAfterAdvice"></bean>
	
	
	<!-- pointcut 을 사용하기 위해서는 bean을 만들어야 함 -->
	<bean id="nameMatchMethodPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedNames">
		<list>
			<value>ADD</value>
			<value></value>
		</list>
		</property></bean>
	
	
	
	<bean id="defaultPointcutAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="pointcut" ref="nameMatchMethodPointcut"></property>
		<property name="advice" ref="logPrintAroundAdvice"></property>
		
		
	</bean>
		
		<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces"><!-- 행위정보 -->
			<list>
			<value>AOP_Basic_Spring06.Calc</value> <!-- 패키지밑에 인터페이스만 적어주면됨(그냥 string으로) -->
			</list>
		</property> 
		<property name="target" ref="calc"/><!-- 실 객체 주소 -->
		<property name="interceptorNames">
			<list>
				<!-- <value>logPrintAroundAdvice</value>  Advice를 가지고있는 보조업무 객체를 넘겨주면 됨 -->
					<!-- arraylist형태로 injection 되는거 -->
				
				<!-- <value>logPrintBeforeAdvice</value>
				<value>logPrintAfterAdvice</value> -->
				<value>defaultPointcutAdvisor</value>
			</list>				
		</property>
	</bean>
</beans> 




