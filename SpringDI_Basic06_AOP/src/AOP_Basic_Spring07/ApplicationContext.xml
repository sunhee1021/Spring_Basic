<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!--  
	
	1. 실 객체의 주소를 알아야 함
		Calc calc = new NewCalc();
		
	2. 가짜를 생성할거임 (= proxy)
		Calc cal = (Calc)Proxy.newProxyInstance(calc.getClass().getClassLoader(), //실 객체의 메타 정보(내부정보)
							   				    calc.getClass().getInterfaces(),  //행위 정보 (인터페이스로 넘겨주고)
							   				    new LogPrintHandler(calc));  //보조 객체의 정보
	
	spring
	1.org.springframework.aop.framework.ProxyFactoryBean 통해서 프록시 객체 생성
	2.LogPrintAroundAdvice 객체(bean) 생성
	3.LogPrintBeforeAdvice 객체(bean) 생성
	4.LogPrintAfterAdvice  객체(bean) 생성
	
	문제점 ) ADD, MUL, SUB 3개의 함수 모두 보조업무가 실행
	
	joinpoint(성수대교 , 무슨대교 이런것들중에)  >  pointcut(잠수교! 이렇게 하나의 포인트(만나는곳)) 
	개념을 사용해서 특정함수 (지정한)제한적으로 보조관심(공통모듈)을 적용하고 싶다
	
	> pointcut 사용해서 특정 함수 ... 보조업무가 적용되고 싶은거래
	
	import org.springframework.aop.support.NameMatchMethodPointcut;
	import org.springframework.aop.support.DefaultPointcutAdvisor;
	
	>>주업무 ... 종류 일일이 이름을 지정하는 것
	>>정규표현식을 통한 구현
	import org.springframework.aop.support.RegexpMethodPointcutAdvisor;
	
	하나의 함수가 동작할 때 여러개의 보조업무 수행가능하다(advice)
	
	-->
	<bean id="calc" class="AOP_Basic_Spring07.NewCalc"></bean>
	<bean id="logPrintAroundAdvice" class="AOP_Basic_Spring07.LogPrintAroundAdvice"></bean>
	<bean id="logPrintBeforeAdvice" class="AOP_Basic_Spring07.LogPrintBeforeAdvice"></bean>
	<bean id="logPrintAfterAdvice"  class="AOP_Basic_Spring07.LogPrintAfterAdvice"></bean>
	
	<!-- 1단계 -->
	<bean  id="regexpMethodPointcutAdvisor"   class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
			<property name="patterns">
					<list>
							<value>.*AD.*</value>
							<value>.*MU*</value>
					</list>
			</property>
			<property name="advice" ref="logPrintAroundAdvice"></property>
	</bean>
	
	
	<!--  2단계 -->
	  <bean  id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
	  				<property name="proxyInterfaces"> <!-- 행위정보 -->
	  						<list>
	  							<value>AOP_Basic_Spring07.Calc</value>
	  						</list>	
	  				</property>
	  				<property name="target"   ref="calc"  />
	  				<property name="interceptorNames">
	  						<list>
	  								<!-- <value>logPrintAroundAdvice</value> --><!-- Advice 가지는 보조업무 객체  -->
	  								<!-- <value>logPrintBeforeAdvice</value> -->
	  								<!-- <value>logPrintAfterAdvice</value> -->
	  								<!-- <value>defaultPointcutAdvisor</value> -->
	  								<value>regexpMethodPointcutAdvisor</value>
	  						</list>
	  				</property>
	  </bean>
</beans> 





