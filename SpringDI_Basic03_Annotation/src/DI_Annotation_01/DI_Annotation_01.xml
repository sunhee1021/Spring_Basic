<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context 
	   http://www.springframework.org/schema/context/spring-context.xsd">

<!-- 
	java코드
	MonitorViewer viewer = new MonitorViewer();
	Recorder recorder = new Recorder();
		
	viewer.setRecorder(recorder);  //주입 (injection)
	System.out.println(viewer.getRecorder());
 -->

<!-- 
	xml 버전 
	<bean id="recorder" class="DI_Annotation_01.Recorder"></bean>
	<bean id="monitorViewer" class="DI_Annotation_01.MonitorViewer">
		<property name="recorder">
			<ref bean="recorder"/>
		</property>
	</bean>
-->
	
<!-- 
	@Autowired > Type기반

	목적 : 의존관계를 자동설정할 때 사용하며 [타입을 이용]하여 의존하는 객체를 삽입해 준다. 
	 	 그러므로 (IOC Container) 해당 타입의 빈객체가 존재하지 않거나 또는 2개 이상 존재할 경우 
	 	 스프링은 예외를 발생시키게 된다.
	설정 위치 : 생성자, 필드, 메소드(굳이 setter메소드가 아니여도 된다)
	
	@Autowired 가 동작되기 위해서는 선행 객체가 필요하다. 그 객체가 어디? (IOC 컨테이너 안에) 생성되어 있어야 함
	>> new AutowiredAnnotationBeanPostProcessor();
	import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;
	
	*추가설정 : AutowiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
	
	사람들이 너무 길어서 귀찮은지 잘 안쓰니까! 
	다른 방법을 생각해냈어 ↓↓↓↓↓↓↓↓↓↓
	
	<context:annotation-config/>
	
	↑↑↑↑↑↑↑↑↑위에 코드를 xml 상단에 써준다면
	Annotation 사용에 필요한 모든 클래스를 한방에 빈 객체를 생성해서 컨테이너에 올리겠다는 의미 
	**장점 : 일일이 객체를 만들어줄 필요가 없다
	**단점 : 사용하지 않는 bean 객체도 자동으로 등록
	
	예외)Caused by: java.lang.ClassNotFoundException: org.springframework.aop.TargetSource
	>>@Autowired 동작시 내부적으로 AOP 작업 (lib가 필요하대!!! jre에 라이브러리 넣어주는거 ~)
	
	**@Autowired 정상적으로 동작되지 않는 경우
	1.injection 되는 타입 객체가(bean) IOC 컨테이너에 없는 경우 (exception)
	
	2.IOC 컨테이너 안에 같은 타입의 객체가 여러개 존재하는 경우 (exception)
		<bean id="a" class="DI_Annotation_01.Recorder"></bean>
		<bean id="b" class="DI_Annotation_01.Recorder"></bean>
		<bean id="c" class="DI_Annotation_01.Recorder"></bean>
	
	3.IOC 컨테이너 안에 같은 타입의 객체가 여러개 존재하더라도 ! 
	bean id값이 setter 함수의 memberfield 명과 동일하다면 자동 주입 성공
	원칙) @Resource (by name) 사용
	  
 -->
 	<context:annotation-config/>
	<bean id="recorder" class="DI_Annotation_01.Recorder"></bean>
	<bean id="monitorViewer" class="DI_Annotation_01.MonitorViewer"></bean>
	
	<bean id="a" class="DI_Annotation_01.Recorder"></bean>
	<bean id="b" class="DI_Annotation_01.Recorder"></bean>
	<bean id="c" class="DI_Annotation_01.Recorder"></bean>

</beans>



